// <auto-generated />
using System;
using GreenVille.Repository.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GreenVille.Repository.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20201116050708_AzureDBTransfer")]
    partial class AzureDBTransfer
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GreenVille.Domain.Model.Alocacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AtendenteEntradaId")
                        .HasColumnName("AtendenteEntradaId")
                        .HasColumnType("int");

                    b.Property<int?>("AtendenteSaidaId")
                        .HasColumnName("AtendenteSaidaId")
                        .HasColumnType("int");

                    b.Property<double>("EconomiaCarbono")
                        .HasColumnName("EconomiaCarbono")
                        .HasColumnType("float");

                    b.Property<DateTime>("Entrada")
                        .HasColumnName("MomentoEntrada")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ManobristaEntradaId")
                        .HasColumnName("ManobristaEntradaId")
                        .HasColumnType("int");

                    b.Property<int?>("ManobristaSaidaId")
                        .HasColumnName("ManobristaSaidaId")
                        .HasColumnType("int");

                    b.Property<bool>("Mensalista")
                        .HasColumnName("Mensalista")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Saida")
                        .HasColumnName("MomentoSaida")
                        .HasColumnType("datetime2");

                    b.Property<int>("VagaId")
                        .HasColumnName("VagaId")
                        .HasColumnType("int");

                    b.Property<float>("ValorPago")
                        .HasColumnName("ValorPago")
                        .HasColumnType("real");

                    b.Property<int>("VeiculoId")
                        .HasColumnName("VeiculoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AtendenteEntradaId");

                    b.HasIndex("AtendenteSaidaId");

                    b.HasIndex("Id");

                    b.HasIndex("ManobristaEntradaId");

                    b.HasIndex("ManobristaSaidaId");

                    b.HasIndex("VagaId");

                    b.HasIndex("VeiculoId");

                    b.ToTable("Alocacoes");
                });

            modelBuilder.Entity("GreenVille.Domain.Model.Cargo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Cargos");
                });

            modelBuilder.Entity("GreenVille.Domain.Model.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnName("CPF")
                        .HasColumnType("nvarchar(14)")
                        .HasMaxLength(14);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone")
                        .HasColumnName("Telefone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("GreenVille.Domain.Model.Estacionamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("GeracaoCreditosCarbonoHora")
                        .HasColumnName("GeracaoCreditosCarbonoHora")
                        .HasColumnType("float");

                    b.Property<string>("NomeUnidade")
                        .IsRequired()
                        .HasColumnName("NomeUnidade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ValorHora")
                        .HasColumnName("ValorHora")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Estacionamentos");
                });

            modelBuilder.Entity("GreenVille.Domain.Model.Funcionario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnName("CPF")
                        .HasColumnType("nvarchar(14)")
                        .HasMaxLength(14);

                    b.Property<int>("CargoId")
                        .HasColumnName("CargoId")
                        .HasColumnType("int");

                    b.Property<int>("EstacionamentoId")
                        .HasColumnName("EstacionamentoId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CargoId");

                    b.HasIndex("EstacionamentoId");

                    b.HasIndex("Id");

                    b.ToTable("Funcionarios");
                });

            modelBuilder.Entity("GreenVille.Domain.Model.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DataHoraLogin")
                        .HasColumnName("DataHoraLogin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataHoraLogout")
                        .HasColumnName("DataHoraLogout")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FuncionarioId")
                        .HasColumnName("FuncionarioId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnName("Senha")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnName("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FuncionarioId");

                    b.HasIndex("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("GreenVille.Domain.Model.Vaga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EstacionamentoId")
                        .HasColumnName("EstacionamentoId")
                        .HasColumnType("int");

                    b.Property<bool>("Interditada")
                        .HasColumnName("Interditada")
                        .HasColumnType("bit");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Ocupada")
                        .HasColumnName("Ocupada")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EstacionamentoId");

                    b.HasIndex("Id");

                    b.ToTable("Vagas");
                });

            modelBuilder.Entity("GreenVille.Domain.Model.Veiculo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Ano")
                        .HasColumnName("Ano")
                        .HasColumnType("int")
                        .HasMaxLength(4);

                    b.Property<string>("Cor")
                        .HasColumnName("Cor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Mensalista")
                        .HasColumnName("Mensalista")
                        .HasColumnType("bit");

                    b.Property<string>("Modelo")
                        .HasColumnName("Modelo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasColumnName("Placa")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Veiculos");
                });

            modelBuilder.Entity("GreenVille.Domain.Model.VeiculoCliente", b =>
                {
                    b.Property<int>("ClienteId")
                        .HasColumnName("ClienteId")
                        .HasColumnType("int");

                    b.Property<int>("VeiculoId")
                        .HasColumnName("VeiculoId")
                        .HasColumnType("int");

                    b.HasKey("ClienteId", "VeiculoId");

                    b.HasIndex("VeiculoId");

                    b.HasIndex("ClienteId", "VeiculoId");

                    b.ToTable("VeiculosClientes");
                });

            modelBuilder.Entity("GreenVille.Domain.Model.Alocacao", b =>
                {
                    b.HasOne("GreenVille.Domain.Model.Funcionario", "AtendenteEntrada")
                        .WithMany()
                        .HasForeignKey("AtendenteEntradaId");

                    b.HasOne("GreenVille.Domain.Model.Funcionario", "AtendenteSaida")
                        .WithMany()
                        .HasForeignKey("AtendenteSaidaId");

                    b.HasOne("GreenVille.Domain.Model.Funcionario", "ManobristaEntrada")
                        .WithMany()
                        .HasForeignKey("ManobristaEntradaId");

                    b.HasOne("GreenVille.Domain.Model.Funcionario", "ManobristaSaida")
                        .WithMany()
                        .HasForeignKey("ManobristaSaidaId");

                    b.HasOne("GreenVille.Domain.Model.Vaga", "Vaga")
                        .WithMany()
                        .HasForeignKey("VagaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GreenVille.Domain.Model.Veiculo", "Veiculo")
                        .WithMany()
                        .HasForeignKey("VeiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GreenVille.Domain.Model.Funcionario", b =>
                {
                    b.HasOne("GreenVille.Domain.Model.Cargo", "Cargo")
                        .WithMany()
                        .HasForeignKey("CargoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GreenVille.Domain.Model.Estacionamento", "Estacionamento")
                        .WithMany()
                        .HasForeignKey("EstacionamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GreenVille.Domain.Model.Usuario", b =>
                {
                    b.HasOne("GreenVille.Domain.Model.Funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("FuncionarioId");
                });

            modelBuilder.Entity("GreenVille.Domain.Model.Vaga", b =>
                {
                    b.HasOne("GreenVille.Domain.Model.Estacionamento", "Estacionamento")
                        .WithMany("Vagas")
                        .HasForeignKey("EstacionamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GreenVille.Domain.Model.VeiculoCliente", b =>
                {
                    b.HasOne("GreenVille.Domain.Model.Cliente", "Cliente")
                        .WithMany("VeiculosClientes")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GreenVille.Domain.Model.Veiculo", "Veiculo")
                        .WithMany("VeiculosClientes")
                        .HasForeignKey("VeiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
